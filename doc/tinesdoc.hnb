<?xml version="1.0" encoding="UTF-8"?>
<?tines pos="0"?>
<!-- generated by tines 1.11.1a (https://github.com/larrykollar/tines) -->

<!DOCTYPE tree[
	<!ELEMENT tree (node*)>
	<!ELEMENT data (#PCDATA)> <!-- (max 4096 bytes long) -->
	<!ELEMENT node (data?,node*)>
	<!ATTLIST node done (yes|no) #IMPLIED
	          type CDATA #IMPLIED
	          expanded (yes|no) #IMPLIED
	>]>

<tree>
<node expanded="yes"><data>Tines Manual</data>
	<node><data>Introduction to Tines</data>
		<node type="text"><data>Tines is an outliner, a planner, an organizer, and a notebook. It is based on the old hnb (hierarchical notebook) software, originally written and maintained by Oyvind Kolas. Larry Kollar (lkollar@gmail.com) currently maintains Tines.</data></node>
		<node type="text"><data>You can use Tines as a straight outliner, editing individual files in OPML, hnb (a simple XML format), or tab-indented text formats.</data></node>
		<node type="text"><data>A more powerful way to use Tines is to keep all your working outlines, project notes, and calendar entries in a single file. If you do not specify a file name when starting Tines, it uses .tines in your home directory.</data></node>
		<node><data>Installing Tines</data>
			<node><data>Unix</data>
				<node><data>Prepackaged Binaries</data>
					<node type="text"><data>At this point, there are no packages for Tines. Prepackaged binaries for the older hnb exist for some operating-systems/distributions, these might not be the latest versions.</data></node>
					<node type="text"><data>Andras Bali maintains a Debian package of hnb, which can be installed by issuing</data></node>
					<node type="text"><data>apt-get install hnb</data></node>
					<node type="text"><data>Patrick Li maintains a Free-BSD ports package of hnb, I don&apos;t know how to install it on Free-BSD.</data></node>
					<node type="text"><data>A MacOS X install package is planned, although it will likely be behind the latest version.</data></node>
				</node>
				<node><data>Compiling from Source</data>
					<node type="text"><data>Tines source is available from github:</data></node>
					<node type="text"><data>git clone https://github.com/larrykollar/tines</data></node>
					<node type="text"><data>Once you have the source, installing it should be simple:</data></node>
					<node type="text"><data>make</data></node>
					<node type="text"><data>sudo make install</data></node>
					<node><data>Platform-specific workarounds:</data>
						<node><data>SuSE Linux:</data>
							<node type="text"><data>SuSE Linux doesn&apos;t install ncurses as curses, which ncurses actually does by default if it is allowed to. Changing the CFLAGS line in src/Makefile to -lncurses instead of -lcurses makes hnb compile on SuSE</data></node>
						</node>
						<node><data>OS X / Darwin:</data>
							<node type="text"><data>Check Makefile and src/Makefile for OSX-specific commands and options, and make adjustments accordingly.</data></node>
							<node type="text"><data>The preprocessor included with earlier versions of OS X doesn&apos;t work properly. Adding -no-cpp-precomp to the CFLAGS definition in src/Makefile should make it compile properly.</data></node>
							<node type="text"><data>This does not apply to Snow Leopard or later versions of OSX. It compiles without any problems on Yosemite.</data></node>
							<node type="text"><data>Note that hnb compiles on 64-bit Macs but segfaults at startup because pointers were being cast as int (this probably applies to all 64-bit systems). Tines does not have this issue.</data></node>
						</node>
					</node>
				</node>
			</node>
		</node>
		<node><data>Starting Tines</data>
			<node type="text"><data>When you start Tines without specifying a file name or other options, it automatically loads the default ~/.tines file. This is the best way to run Tines when using it as a planner.</data></node>
			<node type="text"><data>If ~/.tines doesn&apos;t exist, a sample database will be loaded instead.</data></node>
			<node type="text"><data>Press ESC (or F9) to display the Tines menu. You can edit the ~/.tinesrc file to customize the menu.</data></node>
			<node type="text"><data>The full commandline usage for Tines is:</data></node>
			<node type="text"><data>tines [options] [filename] [-e \command\ [\command\ [\command\ ..]]]</data></node>
			<node type="text"><data>options:</data>
				<node type="text"><data>-h or --help show recognized options</data></node>
				<node type="text"><data>-a or --ascii specifies a tab-indented ASCII file.</data></node>
				<node type="text"><data>Note: ASCII doesn&apos;t recognize or save attributes like to-do status, done etc.</data></node>
				<node type="text"><data>-o or --opml specifies an OPML file.</data></node>
				<node type="text"><data>-x or --xml specifies a generic XML file. This mode lets you use Tines as a basic XML editor, collapsing all but the portion you are working on.</data></node>
				<node type="text"><data>Note: Like ASCII, generic XML files do not recognize attributes such as to-do items.</data></node>
				<node type="text"><data>--hnb specifies an hnb file. This is the current default; future versions of Tines will use OPML as the default version.</data></node>
				<node type="text"><data>--rc=&lt;file&gt; specifies a configuration file. The default is ~/.tinesrc (Tines creates it if it does not exist).</data></node>
				<node type="text"><data>--ui=&lt;type&gt; specifies the interface. The choices are: curses (default), cli, or keygrab.</data></node>
			</node>
		</node>
		<node><data>Running CLI Commands</data>
			<node type="text"><data>Tines has a CLI mode that exposes a great deal of the internal functionality. This can be useful for scripts. For example:</data></node>
			<node type="text"><data>tines -e &apos;go_root&apos; &apos;export_htmlcss test.html&apos;</data></node>
			<node type="text"><data>Tines loads the default file, moves to the start (uppermost node), and exports it with the HTML+CSS filter to a file called test.html.</data></node>
			<node type="text"><data>While running Tines interactively, press F5 to change to CLI mode. This allows you to use advanced commands not exposed by the default menu.</data></node>
		</node>
		<node><data>Quitting Tines</data>
			<node type="text"><data>Press ^Q (Ctrl+Q) to quit. Tines asks if you want to save before quitting. Press Y to save, N to quit without saving, or ESC to return to normal operation.</data></node>
		</node>
		<node><data>Importing data</data>
			<node type="text"><data>To import the contents of another file:</data>
				<node type="text"><data>Press ^L (Ctrl+L) or choose File -&gt; Import in the menu.</data></node>
				<node type="text"><data>Choose the desired format. You can choose between OPML, hnb, or tab-indented text formats.</data></node>
				<node type="text"><data>Enter the relative or full path of the filename you want to import.</data></node>
				<node type="text"><data>Tines imports the file contents under the current level.</data></node>
			</node>
		</node>
		<node><data>Exporting data</data>
			<node type="text"><data>To export the current file:</data>
				<node type="text"><data>Press ^E (Ctrl+E) or choose File -&gt; Export from the menu.</data></node>
				<node type="text"><data>Choose the desired format: OPML, HTML, HTML+CSS, hnb, PostScript, or tab-indented text.</data></node>
				<node type="text"><data>Enter the relative or full path of the filename you want to write to.</data></node>
			</node>
		</node>
		<node><data>Printing</data>
			<node type="text"><data>Tines does not support direct printing. You can export to PostScript and send that to your printer queue. You can also use HTML or HTML+CSS to print from a browser.</data></node>
		</node>
	</node>
	<node><data>Using Outlines</data>
		<node><data>Managing entries</data>
			<node><data>Navigating</data>
				<node type="text"><data>The arrow keys move among the entries. Up and Down move within the current level. Left moves to the parent entry. Right moves to the first child entries (or creates one).</data></node>
				<node type="text"><data>To jump to an entry on the current level, enter the first few letters of that entry. Press Tab twice to enter the sub-level under the chosen entry.</data></node>
				<node type="text"><data>PageUp and PageDown skip a large amount of entries up and down. Practically, they move you to the top or bottom of the current level.</data></node>
				<node type="text"><data>Home jumps to the root (the first entry) of the tree.</data></node>
				<node type="text"><data>Keybindings are also included in the default configuration to use Alt+hjkl to move, Shift+Alt+hjkl to move nodes around, Ctrl+Alt+jk to expand and collapse nodes, and Ctrl+Alt+hl to move into or out of a node while expanding/collapsing it.</data></node>
			</node>
			<node><data>Searching</data>
				<node type="text"><data>To begin a search:</data>
					<node type="text"><data>Press ^F (Ctrl+F). Tines prompts you for a search term, then moves to the first entry containing the search term.</data></node>
					<node type="text"><data>To find the next occurrence of the search term, press Down or N.</data></node>
					<node type="text"><data>To find the previous occurrence press Up or P.</data></node>
					<node type="text"><data>To exit search mode at the current entry, press space or Return.</data></node>
					<node type="text"><data>To exit search mode and return to the node where you began the search, press ESC.</data></node>
				</node>
			</node>
			<node><data>Moving entries</data>
				<node type="text"><data>To move the current entry, hold Shift and press the arrow keys. This may not work on all computers.</data></node>
				<node type="text"><data>To &apos;grab&apos; the current entry, press ^G (Ctrl+G). In Grab mode, use the arrow keys (without a modifier) to move the entry. Press Space or Return to confirm the move, or ESC to return the entry to its previous position.</data></node>
				<node type="text"><data>To copy an entry, press ^C (Ctrl+C).</data></node>
				<node type="text"><data>To cut an entry, press ^X (Ctrl+X).</data></node>
				<node type="text"><data>To paste an entry below the current location, press ^V (Ctrl+V).</data></node>
			</node>
			<node><data>Adding entries</data>
				<node type="text"><data>To add a new entry below the current one, press Insert or ^O. You will also immediately enter edit mode.</data></node>
				<node type="text"><data>To add a new entry above the current one, press ^B.</data></node>
				<node type="text"><data>To add a new entry at the bottom of the current level, type a unique string of characters and press Return.</data></node>
			</node>
			<node><data>Deleting entries</data>
				<node type="text"><data>To delete the current entry, press Delete. If the entry has children, you will be asked to confirm the deletion.</data></node>
				<node type="text"><data>To cut the current entry, press ^X (Ctrl+X). Tines does not confirm the action, but the data is available on the clipboard and can be pasted.</data></node>
			</node>
			<node><data>Indenting and Outdenting entries</data>
				<node type="text"><data>Press &gt; to move the current entry and all the following entries of the same level to be children of the preceding entry.</data></node>
				<node type="text"><data>Press &lt; to move the current entry and all the following entries of the same level to follow the parent of the preceding entry.</data></node>
			</node>
			<node><data>Expanding and Collapsing entries</data>
				<node type="text"><data>To expand an entry to display its sub-entries, press the &apos;+&apos; key. This is a sticky expansion; Tines continues to display the sub-entry when you move away.</data></node>
				<node type="text"><data>To hide expanded entries, pressing the &apos;-&apos; key.</data></node>
				<node type="text"><data>To expand the entire outline, select File -&gt; Expand All in the menu.</data></node>
				<node type="text"><data>To collapse the entire outline, select File -&gt; Collapse All in the menu.</data></node>
				<node type="text"><data>To expand or collapse the entries under the current try, select Entry -&gt; Expand Subtree or Entry -&gt; Collapse Subtree.</data></node>
				<node><data>If you want the expanded/collapsed state of your entries to persist between sessions, edit the &apos;saveexpand&apos; option in your ~/.tinesrc file.</data></node>
			</node>
			<node><data>Narrow subtree</data>
				<node><data>NB: This feature is currently incomplete. To compile it into tines, edit `src/config.h` to #define USE_NARROW_MODE first.</data></node>
				<node><data>&apos;Narrowing&apos; is an experimental feature that temporarily detaches a node and its children from the rest of the outline, allowing you to view and work on that node (and add nodes around it) without distractions. This is especially good for parts of the tree that are nested many levels deep.</data></node>
				<node><data>The command `narrow_or_widen` detaches the node your cursor is on and its children. The command `narrow_or_widen_region` detaches the parent of the node your cursor is on, creating the effect of isolating the tree your cursor is in.</data></node>
				<node><data>The default configuration includes keybindings to narrow/widen the subtree: Alt+o calls `narrow_or_widen_region` and Alt+Ctrl+o calls narrow_or_widen.</data></node>
				<node><data>If the tree is currently in a detached state, re-running either command will restore the full view.</data></node>
				<node><data>IMPORTANT: Note that while tines automatically un-narrows the view before saving any files, it will not do so for autosave data. This means that any autosave files created while you are editing an isolated subtree WILL SAVE PARTIAL DATA (e.g., only the nodes visible to you at the time.)</data></node>
				<node><data>IMPORTANT: Tree narrowing appears to work fine so far, but it is a new feature and has not undergone exhaustive, extensive testing.</data></node>
			</node>
		</node>
		<node><data>Editing entries</data>
			<node type="text"><data>To edit the current entry, press Return.</data></node>
			<node type="text"><data>In edit mode, the cursor keys move between the characters of the data in the entry instead among the entries.</data></node>
			<node type="text"><data>The default editing shortcuts are:</data>
				<node type="text"><data>^A or Home: moves to the beginning of the entry.</data></node>
				<node type="text"><data>^E or End: moves to the end of the entry.</data></node>
				<node type="text"><data>^W moves forward one word.</data></node>
				<node type="text"><data>^B moves back one word.</data></node>
				<node type="text"><data>^S splits the entry at the cursor.</data></node>
				<node type="text"><data>^J joins the following entry to the current entry. Has no effect if the following entry has sub-entries.</data></node>
				<node type="text"><data>Return exits edit mode, keeping your changes.</data></node>
				<node type="text"><data>ESC exits edit mode, canceling your changes.</data></node>
			</node>
		</node>
		<node><data>Spell-checking</data>
			<node type="text"><data>Press F6 to spell-check the current entry. By default, tines uses ispell; you can specify a different spell-checker in ~/.tinesrc.</data></node>
			<node type="text"><data>When the current entry is done:</data>
				<node type="text"><data>Press space to spell check the next entry.</data></node>
				<node type="text"><data>Press Return to exit spell-checking and accept the changes.</data></node>
				<node type="text"><data>Press ESC to exit spell-checking and cancel changes.</data></node>
			</node>
		</node>
		<node><data>Sorting entries</data>
			<node type="text"><data>Use the Level menu to sort entries at the current level.</data>
				<node type="text"><data>Sort is a typical alphanumeric sort.</data></node>
				<node type="text"><data>Sort (desc.) sorts in reverse order.</data></node>
				<node type="text"><data>Shuffle randomizes the entries.</data></node>
			</node>
		</node>
		<node><data>Setting the entry type</data>
			<node type="text"><data>Press F3 to change the entry to a text type. A text entry has a &quot;t&quot; before the bullet. This can be used with XSLT stylesheets to transform an hnb or OPML file to a document with headings, body text, and bulleted lists. Press F3 again to revert the entry to a plain type.</data></node>
			<node type="text"><data>Press ^T (Ctrl+T) to change the entry to a todo type. See &quot;Planner Features&quot; below for more information.</data></node>
		</node>
	</node>
	<node><data>Other features</data>
		<node><data>Planner Functions</data>
			<node type="text"><data>Besides its outlining capabilities, Tines has a number of features making it suitable as a planner. The Planner menu provides convenient access to these functions. You can customize and extend the Planner menu by editing ~/.tinesrc.</data></node>
			<node><data>Todo-list mode</data>
				<node type="text"><data>Press ^T (Ctrl+T) to toggle between a checkbox and a bullet for the current entry. When the entry has a checkbox, press ^D (Ctrl+D) to check or uncheck the box.</data></node>
				<node type="text"><data>If an entry has a clear (not checked) box, and sub-entries with checkboxes, Tines shows a percentage of checked sub-entries instead of the empty box.</data></node>
			</node>
			<node><data>Inserting Calendar Entries</data>
				<node type="text"><data>The Planner menu can insert entries for a specified month, or an entire year. The calendar entries are no different than other entries, besides being automatically inserted.</data></node>
				<node type="text"><data>To insert a monthly calendar, select Planner -&gt; Add Month... from the menu. You are prompted for the month (1-12) and year (four digits).</data></node>
				<node type="text"><data>To insert a yearly calendar, select Planner -&gt; Add Year... from the menu. You are prompted for the year (four digits).</data></node>
			</node>
			<node><data>Inserting Lists</data>
				<node type="text"><data>The Planner menu also provides pre-formatted Actions, Waiting For, and Project lists. These types of lists are based on the &apos;Getting Things Done&apos; (GTD) methodology, conceived by David Allen.</data></node>
				<node type="text"><data>If you prefer a different methodology, you can modify the Planner menu (by editing ~/.tinesrc) as you see fit.</data></node>
			</node>
		</node>
		<node><data>Using URLs</data>
			<node type="text"><data>If an entry contains an URL, press ^A (Ctrl+A) to open that URL in a browser.</data></node>
			<node type="text"><data>The default browser is lynx. The ~/.tinesrc file has a list of supported browsers; you can select any of them by commenting out the current selected &apos;web_command&apos; line and uncommenting another.</data></node>
		</node>
		<node><data>Using Email addresses</data>
			<node type="text"><data>If an entry contains an email address, press ^A (Ctrl+A) to open the configured mail client.</data></node>
			<node type="text"><data>The default mail client is mutt. The ~/.tinesrc file has a short list of supported clients; you can select any of them by commenting out the current selected &apos;mail_command&apos; line and uncommenting another.</data></node>
		</node>
	</node>
	<node><data>Configuring Tines</data>
		<node type="text"><data>When you start Tines for the first time, it creates a file named .tinesrc in your home directory. This file controls the default configuration. All the commandline functions are available for use in the configuration file.</data></node>
		<node type="text"><data>For safety, make a copy of the configuration file and edit it as you see fit. If your copy is called test.tines, you can load it instead of the default configuration with the following command:</data></node>
		<node type="text"><data>tines --rc=test.tines</data></node>
		<node type="text"><data>If you edited your .tinesrc, and caused problems you cannot fix, delete or rename .tinesrc. Next time you start Tines, it reloads a default configuration.</data></node>
		<node type="text"><data>You can edit the configuration file in any text editor. The file is tab-indented, so you can use Tines to edit it with the following command:</data></node>
		<node type="text"><data>tines -a ~/.tinesrc</data></node>
		<node type="text"><data>Tines collapses each section; you can expand them as needed to focus only on the part you want.</data></node>
		<node><data>Context</data>
			<node type="text"><data>Contexts provide a convenient way to change keybindings, depending on what you are doing at any given moment. Tines provides four default contexts:</data>
				<node type="text"><data>main</data></node>
				<node type="text"><data>nodeedit</data></node>
				<node type="text"><data>lineedit</data></node>
				<node type="text"><data>confirm</data></node>
			</node>
			<node type="text"><data>You can define up to 12 custom contexts as well. To define or switch to a context, use the following command:</data></node>
			<node type="text"><data>context \&lt;name&gt;</data></node>
		</node>
		<node><data>Macros</data>
			<node type="text"><data>Tines supports macros. Macros are named collections of CLI commands that can be executed as needed. See the &apos;Commandline Reference&apos; below for a list of Tines CLI commands.</data></node>
			<node type="text"><data>To define a macro, use the following sequence of commands:</data></node>
			<node type="text"><data>macro define macro_name</data></node>
			<node type="text"><data>cmd</data></node>
			<node type="text"><data>cmd...</data></node>
			<node type="text"><data>end</data></node>
			<node type="text"><data>To execute a macro, use &apos;macro macro_name&apos;</data></node>
		</node>
		<node><data>Key Bindings</data>
			<node type="text"><data>Key bindings allow you to assign one or more actions to a keypress in a given context. Valid keys include:</data>
				<node type="text"><data>Any single character, including punctuation and similar characters. Case is significant; a and A can be bound to two different functions.</data></node>
				<node type="text"><data>The sequence &apos;^X&apos; to indicate a control character (Ctrl+X in this example). Note that Ctrl+H is named backspace2, and Ctrl+M is named return.</data></node>
				<node type="text"><data>Function keys f1 through f12</data></node>
				<node type="text"><data>Arrow keys: up, down, left, right. With Shift modifier: sleft, sright, sup, sdown.</data></node>
				<node type="text"><data>Navigation and editing keys: npage (page down), ppage (page up), home, end, return, enter, ins (insert), del (delete), backspace (0x7f), backspace2 (0x08), tab, esc, space</data></node>
				<node type="text"><data>The special key &apos;any&apos; to indicate any unbound key. This can be used to set up a default action. Its usual purpose is to return an error message using &apos;bind any unbound&apos;.</data></node>
			</node>
			<node type="text"><data>To set up a key binding, use the &apos;bind&apos; command. Arguments are the key and the action. Substitute &apos;..&apos; for the key if you want to bind more actions to a single keypress. For example, the following key binding substitutes for an &apos;insert_above&apos; command and is used in the default .tinesrc configuration:</data></node>
			<node type="text"><data>bind ^B insert_below</data></node>
			<node type="text"><data>bind .. &quot;movenode up&quot;</data></node>
			<node type="text"><data>bind .. edit</data></node>
			<node type="text"><data>Note that you have to enclose a command in quotes if it has an argument.</data></node>
		</node>
		<node><data>Menus</data>
			<node type="text"><data>The menu command builds menus. To define a menu entry:</data></node>
			<node type="text"><data>menu menu_name entry_name action</data>
				<node type="text"><data>menu_name: the top-level menu name (examples: File, Edit, Planner)</data></node>
				<node type="text"><data>entry_name: the name of the entry (examples: Save, &quot;Save As...&quot;, Expand). If the entry contains spaces, enclose the name in quotes.</data></node>
				<node type="text"><data>action: the command, macro, or context to execute when this entry is selected. If the action contains spaces, which is always the case for macros or context, enclose the action in quotes.</data></node>
			</node>
		</node>
		<node><data>Helper Commands</data>
			<node type="text"><data>Tines includes a variety of ways to invoke external programs.</data></node>
			<node type="text"><data>web_command: If an entry contains an HTTP or HTTPS URL, the &quot;action&quot; command executes the command specified by this string. Tines substitutes the URL for a * character in the string.</data></node>
			<node type="text"><data>mail_command: If an entry contains a valid email address, the &quot;action&quot; command executes the command specified by this string. Tines substitues the addrss for a * character in the string.</data></node>
			<node type="text"><data>spell_command: The &quot;spell&quot; command executes the command specified by this string. Tines saves each entry to a temporary file and spellchecks it.</data></node>
			<node><data>system: This command executes its argument as a command in a sub-shell. Currently, Tines has no way to directly import the results. However, if the output is in a supported import format (hnb, OPML, or tab-indented ASCII), Tines can import the results.</data></node>
		</node>
	</node>
	<node><data>Commandline Reference</data>
		<node type="text"><data>Tines includes an extensive set of CLI commands.</data></node>
		<node type="text"><data>The commands listed are sorted by function and the file name where they are defined.</data></node>
		<node type="text"><data>To set a variable, use the command %&lt;variable&gt; &lt;value&gt;.</data></node>
		<node><data>Actions (actions.c)</data>
			<node><data>system</data>
				<node type="text"><data>Opens a shell.</data></node>
			</node>
			<node><data>action</data>
				<node type="text"><data>Executes an external shell according to node content. It first checks the direct children, then the current node.</data></node>
				<node type="text"><data>If it contains an http:// URL, the command described in browser_command is executed.</data></node>
				<node type="text"><data>If it contains an &apos;@&apos; character, the characters surrounding it are interpreted as an email address and the mail_command is executed.</data></node>
				<node type="text"><data>If the data starts with &apos;exec&apos; the rest of the data is executed verbatim.</data></node>
			</node>
			<node><data>web_command &lt;command_string&gt;</data>
				<node type="text"><data>The command executed when opening URLs. The detected URL replaces the * character.</data></node>
			</node>
			<node><data>mail_command &lt;command_string&gt;</data>
				<node type="text"><data>The command executed when sending email. The address replaces the * character.</data></node>
			</node>
			<node><data>address (string)</data>
				<node type="text"><data>The email address used as the parameter for mail_command.</data></node>
			</node>
		</node>
		<node><data>Autosave (autosave.c)</data>
			<node><data>tree_changed [increment]</data>
				<node type="text"><data>An internal command, used to drive the autosave functionality. For large changes, pass a high number (around 1000) to make sure the changes are saved immediately. Otherwise, omit the increment.</data></node>
			</node>
			<node><data>autosave_check_timeout</data>
				<node type="text"><data>Checks the timeout counter and autosaves if necessary.</data></node>
			</node>
			<node><data>autosave_timeout (integer)</data>
				<node type="text"><data>The number of ticks before autosaving after change.</data></node>
			</node>
			<node><data>autosave_sync (integer)</data>
				<node type="text"><data>A flag that determines whether the filesystem should be synced after autosave.</data></node>
			</node>
			<node><data>autosave_timer (integer)</data>
				<node type="text"><data>The number of ticks since an unsaved change.</data></node>
			</node>
			<node><data>autosave_threshold (integer)</data>
				<node type="text"><data>Autosave for every autosave_threshold nodes changed.</data></node>
			</node>
			<node><data>autosave_threshold_nodes_changed (integer)</data>
				<node type="text"><data>The number of nodes changed since the last save.);</data></node>
			</node>
		</node>
		<node><data>Calendar (cal.c)</data>
			<node><data>insert_cal &lt;month&gt; &lt;year&gt; [-t]</data>
				<node type="text"><data>Inserts a monthly calendar below the current selection.</data></node>
				<node type="text"><data>&lt;month&gt;: 1-12</data></node>
				<node type="text"><data>&lt;year&gt;: the full (4-digit) year.</data></node>
				<node type="text"><data>Use the -t option to include entries for workday hours as sub-entries for each day.</data></node>
			</node>
			<node><data>today</data>
				<node type="text"><data>Jumps to today&apos;s date in the calendar and expands all sub-entries for the day.</data></node>
			</node>
		</node>
		<node><data>Macros (cli_macro.c)</data>
			<node><data>macro [define] &lt;cmd&gt;</data>
				<node type="text"><data>Defines or executes a macro.</data></node>
				<node type="text"><data>When defining a macro, the commands following are part of the macro until reaching an &apos;end&apos; command.</data></node>
			</node>
		</node>
		<node><data>Clipboard (clipboard.c)</data>
			<node><data>copy</data>
				<node type="text"><data>Stores the current node and its sub-entries in the clipboard.</data></node>
			</node>
			<node><data>cut</data>
				<node type="text"><data>Moves the current node and its subtree to the clipboard.</data></node>
			</node>
			<node><data>paste</data>
				<node type="text"><data>Inserts the contents of the clipboard at the current position in the tree.</data></node>
			</node>
		</node>
		<node><data>Event control (evilloop.c)</data>
			<node><data>quit, q</data>
				<node type="text"><data>Quits tines without prompting to save.</data></node>
			</node>
			<node><data>forced_up (integer)</data>
				<node type="text"><data>If true, attempting to move beyond the first sibling moves to the parent entry.</data></node>
			</node>
			<node><data>forced_down (integer)</data>
				<node type="text"><data>If true, attempting to move beyond the last sibling moves to the entry below the parent entry.</data></node>
			</node>
			<node><data>add_at_top (integer)</data>
				<node type="text"><data>If true, items inserted automatically are added at the top (default 0, at the bottom).</data></node>
			</node>
		</node>
		<node><data>Expand/collapse (expanded.c)</data>
			<node><data>expand [--all|-a|--here|-h|--subtree]</data>
				<node type="text"><data>Expands the current entry to show its sub-entries.</data></node>
				<node type="text"><data>Use the -a or --all option to expand all nodes in the tree.</data></node>
				<node type="text"><data>Use the -h or --here option to expand all descendents of the current node.</data></node>
				<node type="text"><data>Use the --subtree option to recursively expand all descendants of the current entry.</data></node>
			</node>
			<node><data>collapse [-a]</data>
				<node type="text"><data>Collapse the current entry&apos;s sub-entries.</data></node>
				<node type="text"><data>Use the -a option to collapse all entries in the tree.</data></node>
				<node type="text"><data>Use the --subtree option to recursively collapse all descendants of the current entry.</data></node>
			</node>
		</node>
		<node><data>File commands (file.c)</data>
			<node><data>save</data>
				<node type="text"><data>Saves the data.</data></node>
			</node>
			<node><data>revert</data>
				<node type="text"><data>Reverts to the last saved version.</data></node>
			</node>
		</node>
		<node><data>Import/export text (file_ascii.c)</data>
			<node><data>export_ascii &lt;filename&gt;</data>
				<node type="text"><data>Exports the tree as a tab-indented text file.</data></node>
			</node>
			<node><data>import_ascii &lt;filename&gt;</data>
				<node type="text"><data>Imports a tab-indented text file below the current node.</data></node>
			</node>
			<node><data>ascii_margin (integer)</data>
				<node type="text"><data>The margin that text export wraps at. Set to -1 to disable wrapping.</data></node>
			</node>
		</node>
		<node><data>Import/export binary (file_binary.c)</data>
			<node type="text"><data>These are internal commands used for autosave snapshots.</data></node>
			<node><data>export_binary &lt;filename&gt;</data>
				<node type="text"><data>Exports the tree as a binary file.</data></node>
			</node>
			<node><data>import_binary &lt;filename&gt;</data>
				<node type="text"><data>Imports a binary file below the current node.</data></node>
			</node>
		</node>
		<node><data>Import/export help (file_help.c)</data>
			<node type="text"><data>These commands are used to generate embeddable text files for including into source. These functions will soon be deprecated as Tines will pull files from /usr/local/share in the near future.</data></node>
			<node><data>export_help &lt;filename&gt;</data>
				<node type="text"><data>Exports to help source format.</data></node>
			</node>
			<node><data>import_help &lt;filename&gt;</data>
				<node type="text"><data>Imports help source format into the tree.</data></node>
			</node>
		</node>
		<node><data>Import/export hnb (file_hnb.c)</data>
			<node><data>export_hnb &lt;filename&gt;</data>
				<node type="text"><data>Exports the current entry, and all following entries on the same level, in hnb format.</data></node>
			</node>
			<node><data>export_hnb_branch &lt;filename&gt;</data>
				<node type="text"><data>Exports the current entry and its sub-entries in hnb format.</data></node>
			</node>
			<node><data>import_hnb &lt;filename&gt;</data>
				<node type="text"><data>Imports an hnb file below the current node.</data></node>
			</node>
		</node>
		<node><data>Import/export OPML (file_opml.c)</data>
			<node><data>export_opml &lt;filename&gt;</data>
				<node type="text"><data>Exports the current entry, and all following entries on the same level, as OPML.</data></node>
			</node>
			<node><data>export_opml_branch &lt;filename&gt;</data>
				<node type="text"><data>Exports the current entry and its sub-entries in OPML format.</data></node>
			</node>
			<node><data>import_opml &lt;filename&gt;</data>
				<node type="text"><data>Imports an OPML file below the current node.</data></node>
			</node>
		</node>
		<node><data>Import/export XML (file_xml.c)</data>
			<node><data>import_xml &lt;filename&gt;</data>
				<node type="text"><data>Imports an XML file below the current node.</data></node>
			</node>
			<node><data>export_xml &lt;filename&gt;</data>
				<node type="text"><data>Exports the current node, its siblings, and all sublevels to &apos;filename&apos; as XML markup.</data></node>
				<node type="text"><data>Load an XML file with import_xml or hnb -x file.xml to see how it looks inside tines.</data></node>
			</node>
			<node><data>export_xml_branch &lt;filename&gt;</data>
				<node type="text"><data>Exports the current entry and its sub-entries as XML markup.</data></node>
			</node>
			<node><data>xml_cuddle (integer)</data>
				<node type="text"><data>If true, joins the data with nodes if there are no tags within the tag.</data></node>
			</node>
		</node>
		<node><data>Export HTML (file_html.c)</data>
			<node><data>export_html &lt;filename&gt;</data>
				<node type="text"><data>Exports the tree as basic HTML.</data></node>
			</node>
			<node><data>export_htmlcss &lt;filename&gt;</data>
				<node type="text"><data>Exports the tree as HTML with embedded CSS.</data></node>
			</node>
		</node>
		<node><data>Export PostScript (file_ps.c)</data>
			<node><data>export_ps &lt;filename&gt;</data>
				<node type="text"><data>Exports the current entry, its siblings, and all sub-entries to a PostScript file suitable for printing.</data></node>
			</node>
		</node>
		<node><data>Marks (mark.c)</data>
			<node><data>set_mark &lt;mark number&gt;</data>
				<node type="text"><data>Defines a location for use with &apos;go_mark&apos;.</data></node>
			</node>
			<node><data>go_mark &lt;mark_number&gt;</data>
				<node type="text"><data>Moves to a location saved with &apos;set_mark&apos;.</data></node>
			</node>
		</node>
		<node><data>Attributes (node.c)</data>
			<node><data>att_set &lt;attribute&gt; &lt;value&gt;</data>
				<node type="text"><data>Sets an attribute for the current entry.</data></node>
			</node>
			<node><data>att_get &lt;attribute&gt;</data>
				<node type="text"><data>Returns the specified attribute value for the current entry.</data></node>
			</node>
			<node><data>att_clear</data>
				<node type="text"><data>Removes the specified attribute.</data></node>
			</node>
			<node><data>att_list</data>
				<node type="text"><data>Lists the text and attributes for the current entry.</data></node>
			</node>
		</node>
		<node><data>Prefs (prefs.c)</data>
			<node><data>format (string)</data>
				<node type="text"><data>The format of the current file.</data></node>
			</node>
			<node><data>rc_file (string)</data>
				<node type="text"><data>The path and name of the rc file in use (the default is ~/.tinesrc).</data></node>
			</node>
			<node><data>db_file (string)</data>
				<node type="text"><data>The path and name of the file tines is using (the default is ~/.tines).</data></node>
			</node>
			<node><data>default_db_file (string)</data>
				<node type="text"><data>The path and file name of the default file tines loads if no other file is available on the command line.</data></node>
			</node>
			<node><data>showpercent (integer)</data>
				<node type="text"><data>If true, to-do entries with child to-do entries show a percentage of completed sub-entries.</data></node>
			</node>
			<node><data>fixedfocus (integer)</data>
				<node type="text"><data>If true, moves the tree up and down around the selection bar, which remains about 1/3 of the way down the screen.</data></node>
			</node>
			<node><data>savepos (integer)</data>
				<node type="text"><data>If true, saves the current position along with the data.</data></node>
			</node>
			<node><data>readonly (integer)</data>
				<node type="text"><data>If true, tines does not save any changes.</data></node>
			</node>
			<node><data>escdelay (integer)</data>
				<node type="text"><data>Time, in milliseconds, Tines waits before assuming an ESC keypress is meant as an escape rather than part of a command sequence. The default is the value of the curses ESCDELAY variable.</data></node>
			</node>
			<node><data>pid (integer)</data>
				<node type="text"><data>Contains the process ID (PID) for this instance of Tines.</data></node>
			</node>
		</node>
		<node><data>Queries (query.c)</data>
			<node><data>getquery &lt;prompt&gt;</data>
				<node type="text"><data>Inputs a string from the user and puts it into the variable query.</data></node>
				<node type="text"><data>The search function, and some of the export/import functions can use queries.</data></node>
			</node>
			<node><data>query (string)</data>
				<node type="text"><data>The last query. May also be set as a variable.</data></node>
			</node>
		</node>
		<node><data>Search (search.c)</data>
			<node><data>search [-b|-f] &lt;string&gt;</data>
				<node type="text"><data>Searches -b(ackward) or -f(orward) for the next entry with a substring matching the specified string.</data></node>
			</node>
		</node>
		<node><data>Signalling (sigs.c)</data>
			<node><data>stop</data>
				<node type="text"><data>Suspends Tines without quitting or saving and returns to the shell prompt. Use the &apos;fg&apos; command to resume Tines.</data></node>
			</node>
		</node>
		<node><data>Spellcheck (spell.c)</data>
			<node><data>spell [-r]</data>
				<node type="text"><data>Spellchecks the current node, or all children and following siblings recursively (if -r specified).</data></node>
				<node type="text"><data>This function uses the command defined in &apos;spell_command&apos;.</data></node>
			</node>
			<node><data>spell_command (string)</data>
				<node type="text"><data>The command executed when spell checking a node.</data></node>
				<node type="text"><data>Tines writes the entries to a temporary file.</data></node>
			</node>
		</node>
		<node><data>Statistics (statcmd.c)</data>
			<node><data>mem</data>
				<node type="text"><data>Reports the memory usage of the application.</data></node>
			</node>
			<node><data>stats</data>
				<node type="text"><data>Reports the number of items, leaf items and total number of words in the tree.</data></node>
			</node>
		</node>
		<node><data>Current state (state.c)</data>
			<node><data>save_state</data>
				<node type="text"><data>Saves a temporary copy of the current tree and selected node in memory.</data></node>
			</node>
			<node><data>restore_state</data>
				<node type="text"><data>Restores the copy of the tree saved with save_state.</data></node>
			</node>
		</node>
		<node><data>Tree (tree_misc.c)</data>
			<node><data>movenode &lt;up|left|right|down&gt;</data>
				<node type="text"><data>Reposition the current node.</data></node>
			</node>
			<node><data>go &lt;up|down|left|right|recurse|backrecurse|root|top|bottom&gt;</data>
				<node type="text"><data>Changes the current position in the tree:</data>
					<node type="text"><data>up/down: moves up or down in the current level.</data></node>
					<node type="text"><data>left: moves to the parent node.</data></node>
					<node type="text"><data>right: moves to the first child node. If no child node exists, tines creates one.</data></node>
					<node type="text"><data>root: moves to the top of the tree.</data></node>
					<node type="text"><data>top/bottom: moves to the first or last node.</data></node>
					<node type="text"><data>recurse: moves to the next node in the current level.</data></node>
					<node type="text"><data>backrecurse: moves to the first node in the current level.</data></node>
				</node>
			</node>
			<node><data>outdent</data>
				<node type="text"><data>Moves the active item and the following siblings one level to the left.</data></node>
			</node>
			<node><data>indent</data>
				<node type="text"><data>Moves the active item and the following siblings one level to the right.</data></node>
			</node>
			<node><data>remove</data>
				<node type="text"><data>Removes the active node. If the node has children, you have a chance to confirm the deletion.</data></node>
			</node>
			<node><data>commandline</data>
				<node type="text"><data>Invokes the interactive command line in curses mode.</data></node>
			</node>
			<node><data>insert_below</data>
				<node type="text"><data>Adds a new entry immediately below the active entry.</data></node>
			</node>
			<node><data>sort [-r|-a|-d]</data>
				<node type="text"><data>Sorts the siblings of the currently selected node:</data>
					<node type="text"><data>-a=ascending</data></node>
					<node type="text"><data>-d=descending</data></node>
					<node type="text"><data>-r=random (shuffle)</data></node>
				</node>
			</node>
			<node><data>toggle_todo</data>
				<node type="text"><data>Toggles the visibility and usage of the checkbox for the current entry.</data></node>
			</node>
			<node><data>toggle_done</data>
				<node type="text"><data>Toggles the checkbox for the currently active entry, if the entry has a checkbox.</data></node>
			</node>
			<node><data>toggle_text</data>
				<node type="text"><data>Toggles the text marker for the current entry. (Introduced in 1.9.20.)</data></node>
			</node>
			<node><data>bind &lt;key&gt; &lt;action&gt; [parameter]</data>
				<node type="text"><data>Binds the action to the specified key.</data></node>
				<node type="text"><data>Use the virtual key &apos;..&apos; to bind subsequent actions; this allows binding multiple actions to a single keystroke.</data></node>
				<node type="text"><data>The virtual key &apos;any&apos; indicates any unbound keys. This can be used to produce an error message using &apos;bind any unbound&apos;.</data></node>
			</node>
			<node><data>unbound</data>
				<node type="text"><data>Outputs a message, indicating that the pressed key is not bound in the current context.</data></node>
			</node>
			<node><data>context &lt;context&gt;</data>
				<node type="text"><data>Changes the current context.</data></node>
				<node type="text"><data>Predefined contexts include &apos;main&apos;, &apos;lineedit&apos;, &apos;nodeedit&apos;, and &apos;confirm&apos;. You can define other contexts as needed.</data></node>
			</node>
			<node><data>backspace</data>
				<node type="text"><data>Erases the preceding character.</data></node>
			</node>
			<node><data>delete</data>
				<node type="text"><data>Erases the following character.</data></node>
			</node>
			<node><data>left</data>
				<node type="text"><data>Moves the cursor or selection left.</data></node>
			</node>
			<node><data>right</data>
				<node type="text"><data>Moves the cursor or selection right.</data></node>
			</node>
			<node><data>up</data>
				<node type="text"><data>Moves the cursor or selection up.</data></node>
			</node>
			<node><data>down</data>
				<node type="text"><data>Moves the cursor or selection down.</data></node>
			</node>
			<node><data>pagedown</data>
				<node type="text"><data>Moves down one page.</data></node>
			</node>
			<node><data>pageup</data>
				<node type="text"><data>Moves up one page.</data></node>
			</node>
			<node><data>bkill_word</data>
				<node type="text"><data>Erases the preceding word.</data></node>
			</node>
			<node><data>kill_word</data>
				<node type="text"><data>Erases the following word.</data></node>
			</node>
			<node><data>bol</data>
				<node type="text"><data>Moves the cursor to the beginning of line.</data></node>
			</node>
			<node><data>eol</data>
				<node type="text"><data>Moves to the end of the line.</data></node>
			</node>
			<node><data>top</data>
				<node type="text"><data>Moves to the topmost sibling of the current entry.</data></node>
			</node>
			<node><data>bottom</data>
				<node type="text"><data>Moves to the bottommost sibling of the current entry.</data></node>
			</node>
			<node><data>skipword</data>
				<node type="text"><data>Moves to the next word.</data></node>
			</node>
			<node><data>bskipword</data>
				<node type="text"><data>Moves to the previous word.</data></node>
			</node>
			<node><data>cancel</data>
				<node type="text"><data>Cancels editing of the node.</data></node>
			</node>
			<node><data>complete</data>
				<node type="text"><data>Outputs the possible completions of the entered command or variable.</data></node>
			</node>
			<node><data>confirm</data>
				<node type="text"><data>Confirms the question posed, (used in dialogs asking for the users&apos; consent).</data></node>
			</node>
			<node><data>ignore</data>
				<node type="text"><data>Ignores a pressed key without giving an error message.</data></node>
			</node>
			<node><data>join</data>
				<node type="text"><data>Joins the currently edited node with the following sibling.</data></node>
			</node>
			<node><data>split</data>
				<node type="text"><data>Splits the currently edited node at the cursor location.</data></node>
			</node>
			<node><data>kill_line</data>
				<node type="text"><data>Erases the currently edited line.</data></node>
			</node>
			<node><data>kill_to_bol</data>
				<node type="text"><data>Erases from the cursor to the beginning of the line.</data></node>
			</node>
			<node><data>kill_to_eol</data>
				<node type="text"><data>Erases from the cursor to the end of the line.</data></node>
			</node>
		</node>
		<node><data>Bindings (ui_binding.c)</data>
			<node type="text"><data>Editing bindings and contexts.</data></node>
			<node><data>Configuration commands</data>
				<node><data>bind</data>
					<node type="text"><data>Creates a keybinding in the current context. The virtual key .. adds actions to the last-defined key, allowing a single key to perform multiple actions. Each context may have up to 255 key bindings.</data></node>
				</node>
				<node><data>unbound</data>
					<node type="text"><data>Displays an error message for keys not bound to another action.</data></node>
				</node>
				<node><data>ignore</data>
					<node type="text"><data>Ignores the current input. Can be used to bind a key you want silently ignored.</data></node>
				</node>
				<node><data>confirm \&lt;text&gt;</data>
					<node type="text"><data>Confirms the action.</data></node>
				</node>
				<node><data>context \&lt;name&gt;</data>
					<node type="text"><data>Switches to the named context. The following contexts are predefined:</data>
						<node type="text"><data>main: the primary context for navigating through the tree.</data></node>
						<node type="text"><data>confirm: used to confirm a user action (such as deleting).</data></node>
						<node type="text"><data>nodeedit: used for editing a node.</data></node>
						<node type="text"><data>lineedit: not currently used.</data></node>
					</node>
					<node type="text"><data>You can define up to 12 custom contexts.</data></node>
				</node>
				<node><data>command \&lt;param&gt;</data>
					<node type="text"><data>(executed in evilloop.c) Executes \&lt;param&gt; as a CLI command.</data></node>
				</node>
				<node><data>quit</data>
					<node type="text"><data>(executed in evilloop.c) Quits without saving.</data></node>
				</node>
			</node>
			<node><data>Movement commands (entry-level)</data>
				<node><data>up</data>
					<node type="text"><data>Moves the cursor or selection up.</data></node>
				</node>
				<node><data>down</data>
					<node type="text"><data>Moves the cursor or selection down.</data></node>
				</node>
				<node><data>left</data>
					<node type="text"><data>Moves the cursor or selection left.</data></node>
				</node>
				<node><data>right</data>
					<node type="text"><data>Moves the cursor or selection right.</data></node>
				</node>
				<node><data>top</data>
					<node type="text"><data>Moves to the topmost sibling of the current entry.</data></node>
				</node>
				<node><data>bottom</data>
					<node type="text"><data>Moves to the last sibling of the current entry.</data></node>
				</node>
				<node><data>pageup</data>
					<node type="text"><data>Moves up a page of entries.</data></node>
				</node>
				<node><data>pagedown</data>
					<node type="text"><data>Moves down a page of entries.</data></node>
				</node>
			</node>
			<node><data>Movement commands (edit-level)</data>
				<node><data>bol</data>
					<node type="text"><data>Moves to the beginning of the entry.</data></node>
				</node>
				<node><data>eol</data>
					<node type="text"><data>Moves to the end of the entry.</data></node>
				</node>
				<node><data>skipword</data>
					<node type="text"><data>Moves to the beginning of the next word.</data></node>
				</node>
				<node><data>bskipword</data>
					<node type="text"><data>Moves the cursor to the beginning of the first word to the left of the cursor.</data></node>
				</node>
			</node>
			<node><data>Editing commands</data>
				<node><data>backspace</data>
					<node type="text"><data>Deletes the character to the left of the cursor.</data></node>
				</node>
				<node><data>delete</data>
					<node type="text"><data>Deletes the character under the cursor.</data></node>
				</node>
				<node><data>kill_word</data>
					<node type="text"><data>Deletes the word under the cursor.</data></node>
				</node>
				<node><data>bkill_word</data>
					<node type="text"><data>Deletes the word to the left of the cursor.</data></node>
				</node>
				<node><data>kill_to_bol</data>
					<node type="text"><data>Deletes all the text from the cursor to the beginning of the entry.</data></node>
				</node>
				<node><data>kill_to_eol</data>
					<node type="text"><data>Deletes all the text from the cursor to the end of the entry.</data></node>
				</node>
				<node><data>kill_line</data>
					<node type="text"><data>Deletes the line under the cursor.</data></node>
				</node>
				<node><data>cancel</data>
					<node type="text"><data>Cancels edit mode without saving changes.</data></node>
				</node>
				<node><data>complete</data>
					<node type="text"><data>Outputs possible completions of the partially-entered command or variable name.</data></node>
				</node>
				<node><data>join</data>
					<node type="text"><data>Combines the subsequent entry with the following entry.</data></node>
				</node>
				<node><data>split</data>
					<node type="text"><data>Splits the entry at the cursor position.</data></node>
				</node>
			</node>
		</node>
		<node><data>CLI Commands (ui_cli.c, libcli/cli.c)</data>
			<node><data>add &lt;string&gt;</data>
				<node type="text"><data>Inserts a new entry at the end of the current level, containing the specified string.</data></node>
				<node type="text"><data>NOTE: The position does not move. To operate on the new entry, use &apos;go bottom&apos; to move to the entry.</data></node>
			</node>
			<node><data>ls</data>
				<node type="text"><data>Lists the nodes at the current level.</data></node>
			</node>
			<node><data>addc &lt;parent&gt; &lt;string&gt;</data>
				<node type="text"><data>Inserts a new entry under the node named &lt;parent&gt;, with the text specified in &lt;string&gt;.</data></node>
			</node>
			<node><data>cd &lt;path&gt;</data>
				<node type="text"><data>Moves to a different part of the tree.</data></node>
			</node>
			<node><data>pwd</data>
				<node type="text"><data>Echoes the current path.</data></node>
			</node>
			<node><data>show_vars</data>
				<node type="text"><data>Lists all defined variables and their values.</data></node>
			</node>
		</node>
		<node><data>Node formatting (ui_draw.c)</data>
			<node><data>display_format &lt;format string&gt;</data>
				<node type="text"><data>Defines how each node is displayed. The format string syntax is:</data>
					<node type="text"><data>spaces: literal spaces</data></node>
					<node type="text"><data>i&lt;width&gt;: indents the specified width in characters</data></node>
					<node type="text"><data>-: inserts a bullet</data></node>
					<node type="text"><data>d: inserts the actual node data</data></node>
					<node type="text"><data>x&lt;width&gt;: reserved</data></node>
				</node>
				<node type="text"><data>A typical format string is &apos;i4- d&apos;.</data></node>
			</node>
			<node><data>bullet_leaf &lt;string&gt;</data>
				<node type="text"><data>The format for entries with no sub-entries.</data></node>
				<node type="text"><data>Example: &apos; *&apos;</data></node>
			</node>
			<node><data>bullet_parent &lt;string&gt;</data>
				<node type="text"><data>The format for entries with unexpanded sub-entries.</data></node>
				<node type="text"><data>Example: &apos; +&apos;</data></node>
			</node>
			<node><data>bullet_parent_expanded &lt;string&gt;</data>
				<node type="text"><data>The format for entries with expanded sub-entries.</data></node>
				<node type="text"><data>Example: &apos; -&apos;</data></node>
			</node>
			<node><data>bullet_todo_parent_undone &lt;string&gt;</data>
				<node type="text"><data>The format for unchecked to-do entries with sub-entries.</data></node>
				<node type="text"><data>Example: &apos;[ ]&apos;</data></node>
			</node>
			<node><data>bullet_todo_parent_done &lt;string&gt;</data>
				<node type="text"><data>The format for checked to-do entries with sub-entries.</data></node>
				<node type="text"><data>Example: &apos;[X]&apos;</data></node>
			</node>
			<node><data>bullet_todo_leaf_undone &lt;string&gt;</data>
				<node type="text"><data>The format for unchecked to-do entries with no sub-entries.</data></node>
				<node type="text"><data>Example: &apos;[ ]&apos;</data></node>
			</node>
			<node><data>bullet_todo_leaf_done &lt;string&gt;</data>
				<node type="text"><data>The format for checked to-do entries with no sub-entries.</data></node>
				<node type="text"><data>Example: &apos;[X]&apos;</data></node>
			</node>
			<node><data>bullet_textleaf &lt;string&gt;</data>
				<node type="text"><data>The format for text entries with no sub-entries.</data></node>
				<node type="text"><data>Example: &apos;t *&apos;</data></node>
			</node>
			<node><data>bullet_textparent &lt;string&gt;</data>
				<node type="text"><data>The format for text entries with collapsed sub-entries.</data></node>
				<node type="text"><data>Example: &apos;t +&apos;</data></node>
			</node>
			<node><data>bullet_textparent_expanded &lt;string&gt;</data>
				<node type="text"><data>The format for text entries with expanded sub-entries.</data></node>
				<node type="text"><data>Example: &apos;t -&apos;</data></node>
			</node>
		</node>
		<node><data>Node editor (ui_edit.c)</data>
			<node><data>edit</data>
				<node type="text"><data>Invokes the node editor for the current node.</data></node>
			</node>
		</node>
		<node><data>Menu definition (ui_menu.c)</data>
			<node><data>menu &lt;menu&gt; &lt;text&gt; &lt;cmd&gt;</data>
				<node type="text"><data>Defines a menu entry.</data>
					<node type="text"><data>&lt;menu&gt; specifies the menu name.</data></node>
					<node type="text"><data>&lt;text&gt; specifies the entry text.</data></node>
					<node type="text"><data>&lt;cmd&gt; specifies the associated command or macro.</data></node>
				</node>
			</node>
		</node>
		<node><data>Messages (ui_overlay.c)</data>
			<node><data>helptext &lt;help for context&gt;</data>
				<node type="text"><data>Defines the help text for the current context.</data></node>
				<node type="text"><data>The character | alternates between the menuitem and the menutext styles.</data></node>
				<node type="text"><data>|| is the escape sequence for a single pipe.</data></node>
			</node>
			<node><data>status [-c|--clear] &lt;message&gt;</data>
				<node type="text"><data>Adds &apos;message&apos; as the newest status line.</data></node>
				<node type="text"><data>Use -c or --clear to clear all pending status messages off the screen.</data></node>
			</node>
			<node><data>echo [-c|--clear] &lt;message&gt;</data>
				<node type="text"><data>Alias for status.</data></node>
			</node>
		</node>
		<node><data>Style (ui_style.c)</data>
			<node><data>style &lt;element&gt; &lt;fgcolor/bgcolor&gt; &lt;attributes&gt;</data>
				<node type="text"><data>Changes the drawing style of &lt;element&gt;. Available elements are: menuitem, menutext, parentnode, node, bullet, selected, parentselected and background.</data></node>
			</node>
		</node>
	</node>
</node>
</tree>
