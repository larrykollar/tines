.\" t
.TH TINES_OPML 7 "24 Jan 2017"
.SH NAME
tines_opml \- Interactions/conversions between Tines and OPML format
.
.SH DESCRIPTION
Outline Processor Markup Language (OPML)
is a standard interchange format for outliners,
and will become the default format for Tines
in the future
(the
.I hnb
format will be maintained as a legacy format).
To run Tines as an OPML outliner,
use the
.BR topml (1)
command.
.LP
This manpage describes how Tines maps
.I hnb
and OPML elements and attributes.
.LP
Tines supports OPML 1.0.
Any OPML 2.0 elements and attributes
are silently ignored.
.
.SS OPML Head Element
The
.I hnb
format has no analogous section.
Tines 1.11.0 and newer versions
preserve all OPML 1.0 standard <head> elements
and make use of the metadata where sensible.
All <head> elements
have corresponding text variables
that can be used to view or change
the metadata as needed.
.LP
If Tines opens an OPML file with both
a Tines "pos" processing instruction
(e.g. <?tines\ pos="12"?>)
and a value for <vertScrollState>,
Tines uses the value in the processing instruction.
In any case, the two should have the same value.
.LP
On export, Tines automatically updates
the values of the following <head> elements:
.TP 4
\[bu]
dateModified
.TP 4
\[bu]
vertScrollState
.TP 4
\[bu]
expansionState
.LP
If the <title> element is undefined,
Tines sets the value to the text of the first node in the outline.
.
.SS Attributes
Tines and
.I hnb
save OPML attributes on import,
and write them back on export.
The CLI commands
.BR att_get ,
.BR att_set ,
.BR att_clear ,
and
.BR att_list
can manipulate attributes if needed.
.LP
The OPML "text" attribute and the contents of an hnb <data> element
are equivalent.
The primary difference is that the OPML specification requires
the use of the "text" attribute in every <outline> element,
where hnb does not require the <data> element.
Thus, to avoid unexpected behavior,
Tines must insert a token text string when exporting blank entries.
.LP
The
.I hnb
format has two attributes:
.TP 6
.I type
A freeform text attribute.
If set to "todo," Tines and
.I hnb
render the entry with a checkbox
(indicating the entry is a to-do item).
Tines also supports a value of "text"
to mark entries that should be rendered as body text
when exporting to text-centric formats
such as Groff or Markdown.
.TP 6
.I done
When
.BR type= \[dq]todo\[dq],
this is the state of the item.
If
.BR done= \[dq]yes\[dq],
Tines and
.I hnb
render the entry with a checked checkbox.
Otherwise, the checkbox is blank.
.LP
In contrast, the OPML defines only the "type" attribute.
The specification
defers the implementation of "type" and its values
to the application.
.I hnb
simply imports and exports attributes to OPML verbatim.
As OPML has no
.B done
attribute, an exported OPML file may not validate properly.
.LP
Some OPML-based outliners define a "_note" attribute;
Tines preserves this information as well.
You can use the "att_get _note" CLI command
to display the value of this attribute
if it exists.
.LP
In Tines 2.0, all import/export actions
will be driven through XSLT stylesheets,
allowing the user to modify or extend conversions.
.
.SS Processing Instructions
Tines recognizes and uses
the following processing instructions
for determining the position when last saved
("n" is the linear node number,
where 1 is the first node):
.TP 4
\[bu]
<?pos="n"?> (original
.I hnb
syntax)
.TP 4
\[bu]
<?hnb pos="n"?> (written by the
.I lhnb
extended version)
.TP 4
\[bu]
<?tines pos="n"?> (Tines syntax)
.LP
The presence of one of those processing instructions
in an OPML file
overrides any value specified in the vertScrollState element.
Unless a different outliner preserves processing instructions,
the values should be the same.
.
.SH "SEE ALSO"
.BR topml (1),
.BR tines_hnb (7),
OPML 1.0 definition (http://dev.opml.org/spec1.html)
.
.SH AUTHOR
The original
.I hnb
was written by
\[/O]yvind Kol\[:a]s (pippin@users.sourceforge.net).
.LP
.I tines
is now maintained by Larry Kollar, who also wrote this manpage.
